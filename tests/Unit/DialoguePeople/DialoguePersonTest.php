<?php
namespace Tests\Unit\DialoguePeople;

use App\DialoguePerson;
use App\Repositories\DialoguePersonRepository;
use App\User;
use Exception;
use Tests\ModelBuilders\DialoguePersonBuilder;
use Tests\ModelBuilders\UserBuilder;
use Tests\TestCase;
use Faker\Generator as Faker;

class DialoguePersonTest extends TestCase
{
    use UserBuilder;
    use DialoguePersonBuilder;
    protected $faker;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->faker = new Faker();
    }

    public function testCanCreateDialoguePerson(): void
    {
        $data = [
            'person_name' =>  'Lari',
            'user_id' => 1,
        ];

        $dialoguePersonRepo = new DialoguePersonRepository(new DialoguePerson());
        $dialoguePerson = $dialoguePersonRepo->create($data);

        $this->assertInstanceOf(DialoguePerson::class, $dialoguePerson);
        $this->assertEquals($data['person_name'], $dialoguePerson->person_name);
        $this->assertEquals($data['user_id'], $dialoguePerson->user_id);
    }

    /**
     * @throws Exception
     */
    public function testCanShowDialoguePerson(): void
    {
        $user = factory(User::class)->create();
        $dialoguePerson = factory(DialoguePerson::class)->create([
            'user_id' => $user->id,
        ]);

        $dialoguePersonRepo = new DialoguePersonRepository(new DialoguePerson());
        $found = $dialoguePersonRepo->find($dialoguePerson->id);

        $this->assertInstanceOf(DialoguePerson::class, $found);
        $this->assertEquals($found->person_name, $dialoguePerson->person_name);
        $this->assertEquals($found->user_id, $dialoguePerson->user_id);
    }
}
